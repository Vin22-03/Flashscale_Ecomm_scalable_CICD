pipeline {
    agent any

    parameters {
        string(
            name: 'VERSION_TAG',
            defaultValue: "V${BUILD_NUMBER}",
            description: "üî• Docker Image Version (Auto-incremented as V1, V2, ...)"
        )
        choice(
            name: 'DEPLOY_COLOR',
            choices: ['blue', 'green'],
            description: "üé® Choose Deployment Color (Blue/Green)"
        )
    }

    environment {
        AWS_REGION    = "us-east-1"
        AWS_ACCOUNT   = "921483785411"
        BACKEND_REPO  = "${AWS_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/flashscale-backend"
        FRONTEND_REPO = "${AWS_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/flashscale-frontend"
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))   // keep last 10 builds
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main',
                    url: 'https://github.com/Vin22-03/Flashscale_Ecomm_scalable_CICD.git',
                    credentialsId: 'github-creds'
            }
        }

        stage('Login to AWS ECR') {
            steps {
                withAWS(region: "${AWS_REGION}", credentials: 'aws-ecr') {
                    sh '''
                        echo "üîë Logging into Amazon ECR..."
                        aws ecr get-login-password --region $AWS_REGION | \
                        docker login --username AWS --password-stdin $AWS_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com
                    '''
                }
            }
        }

        stage('Build Backend Docker Image') {
            steps {
                dir('backend') {
                    sh '''
                        echo "üî® Building Backend..."
                        docker build -t flashscale-backend:$VERSION_TAG .
                        
                        # Tag with Version+Color and latest
                        docker tag flashscale-backend:$VERSION_TAG $BACKEND_REPO:${VERSION_TAG}-${DEPLOY_COLOR}
                        docker tag flashscale-backend:$VERSION_TAG $BACKEND_REPO:latest
                    '''
                }
            }
        }

        stage('Build Frontend Docker Image') {
            steps {
                dir('frontend') {
                    sh '''
                        echo "üé® Building Frontend..."
                        docker build -t flashscale-frontend:$VERSION_TAG .
                        
                        # Tag with Version+Color and latest
                        docker tag flashscale-frontend:$VERSION_TAG $FRONTEND_REPO:${VERSION_TAG}-${DEPLOY_COLOR}
                        docker tag flashscale-frontend:$VERSION_TAG $FRONTEND_REPO:latest
                    '''
                }
            }
        }

        stage('Push Images to ECR') {
            steps {
                sh '''
                    echo "üì§ Pushing Backend Image..."
                    docker push $BACKEND_REPO:${VERSION_TAG}-${DEPLOY_COLOR}
                    docker push $BACKEND_REPO:latest

                    echo "üì§ Pushing Frontend Image..."
                    docker push $FRONTEND_REPO:${VERSION_TAG}-${DEPLOY_COLOR}
                    docker push $FRONTEND_REPO:latest
                '''
            }
        }
    }

    post {
        success {
            echo "‚úÖ CI Pipeline Success: Built & pushed ${VERSION_TAG}-${DEPLOY_COLOR} to ECR"
        }
        failure {
            echo "‚ùå CI Pipeline Failed: Check logs in Jenkins"
        }
    }
}
