pipeline {
    agent any

    parameters {
        choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'Choose whether to apply or destroy the infrastructure')
    }

    environment {
        AWS_REGION = "us-east-1"
    }

    stages {
        stage('Checkout Repo') {
            steps {
                git branch: 'main',
                    url: 'https://github.com/Vin22-03/Flashscale_Ecomm_scalable_CICD.git',
                    credentialsId: 'github-creds'
            }
        }

        stage('Terraform Init') {
            steps {
                withAWS(credentials: 'aws-ecr', region: "${env.AWS_REGION}") {
                    dir('terraform') {
                        sh 'terraform init'
                    }
                }
            }
        }

        stage('Terraform Plan') {
            when {
                expression { params.ACTION == 'apply' }
            }
            steps {
                withAWS(credentials: 'aws-ecr', region: "${env.AWS_REGION}") {
                    dir('terraform') {
                        sh 'terraform plan -out=tfplan'
                    }
                }
            }
        }

        stage('Terraform Apply') {
            when {
                expression { params.ACTION == 'apply' }
            }
            steps {
                input message: "⚡ Approve to Apply Infra?"
                withAWS(credentials: 'aws-ecr', region: "${env.AWS_REGION}") {
                    dir('terraform') {
                        sh 'terraform apply -auto-approve tfplan'
                    }
                }
            }
        }

        stage('Terraform Destroy') {
            when {
                expression { params.ACTION == 'destroy' }
            }
            steps {
                input message: "⚠️ Are you sure you want to DESTROY all infra?"
                withAWS(credentials: 'aws-ecr', region: "${env.AWS_REGION}") {
                    dir('terraform') {
                        sh 'terraform destroy -auto-approve'
                    }
                }
            }
        }
    }
}
